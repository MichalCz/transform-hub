pipeline {
  agent {
    node {
      label "scp"
    }
  }
  stages {
    stage("Checkout SCM") {
      steps {
        checkout scm
      }
    }
    stage("Build Docker") {
      steps {
        script {
            image = docker.build("scramjet/host", "-f packages/sth/Dockerfile.build .")
        }
      }
    }
    stage("Publish Docker Prod") {
      // Run only on Tags
      when {
        buildingTag()
      }
      steps {
        script {
          docker_tag = sh(returnStdout: true, script: "echo ${TAG_NAME} | sed 's/^v//'").trim()
          docker.withRegistry('https://repo.int.scp.ovh', 'docker-repo') {
            image.push("${docker_tag}")
            image.push("latest")
          }
        }
      }
    }
  }
  post {
    always {
      // When successed currentBuild.result is null
      script {
        if (currentBuild.result == null) {
          currentBuild.result = 'SUCCESS'
        }
      }
      echo "Cleaning.."
      cleanWs()
    }
    // Slack Notifications syntax: https://www.jenkins.io/doc/pipeline/steps/slack/
    unsuccessful {
      script {
        // CHANGE_ID is set only for pull requests
        if (env.CHANGE_ID) {
          slackSend (color: '#FF0000', message: "Job ${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL}) failed")
        }
      }
    }
    fixed {
      script {
        // CHANGE_ID is set only for pull requests
        if (env.CHANGE_ID) {
          slackSend (color: '#00FF00', message: "Job ${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL}) back to normal")
        }
      }
    }
  }
}
