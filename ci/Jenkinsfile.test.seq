pipeline {
  agent {
    node {
      label "scp"
    }
  }
  environment {
      docker_ci_image = "repo.int.scp.ovh/scramjet/nodejs-ci:buster"
      docker_host_sock_gid = sh(returnStdout: true, script: "stat -c %g /var/run/docker.sock").trim()
      // https://stackoverflow.com/questions/62282418/jenkins-sh-npm-i-not-working-in-docker-agent
      HOME = "."
  }
  stages {
    stage("Checkout SCM") {
      steps {
        checkout scm
      }
    }
    stage("Install packages") {
      steps {
        script {
          docker.image("${docker_ci_image}").inside() {
            sh("yarn install")
          }
        }  
      }
    }
    stage("Build packages") {
      steps {
        script {
          docker.image("${docker_ci_image}").inside() {
            sh("yarn build")
          }
        }  
      }
    }
    stage("Build docker images") {
      steps {
        script {
          docker.image("${docker_ci_image}").inside("--group-add=${docker_host_sock_gid} -v /var/run/docker.sock:/var/run/docker.sock") {
            sh("yarn build:docker")
          }
        }  
      }
    }
    stage("Prepack packages") {
      steps {
        script {
          docker.image("${docker_ci_image}").inside() {
            sh("yarn prepack")
          }
        }  
      }
    }
    stage("Prepare sample") {
      steps {
        script {
          docker.image("${docker_ci_image}").inside() {
            dir("packages/pre-runner") {
              sh("yarn prepare-sample-tar")
            }
          }
        }  
      }
    }
    stage("Start Sequence") {
      // Currently runner is not exiting correctly, so to avoid hanging job it will abort after timeout.
      // It will still end with error if something goes wrong in this stage.
      // Saw on: https://e.printstacktrace.blog/how-to-time-out-jenkins-pipeline-stage-and-keep-the-pipeline-running/
      options {
        timeout(time: 10, unit: "SECONDS")
      }
      steps {
        script {
          Exception caughtException = null

          catchError(buildResult: 'SUCCESS', stageResult: 'ABORTED') { 
            try { 
              docker.image("${docker_ci_image}").inside("--group-add=${docker_host_sock_gid} -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp") {
                dir("dist/supervisor/bin") {
                  sh("SEQUENCE_PATH=../../../packages/pre-runner/sample-package/package.tar.gz node supervisor.js")
                }
              }
            } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
              error "Caught ${e.toString()}" 
            } catch (Throwable e) {
              caughtException = e
            }
          }
          if (caughtException) {
              error caughtException.message
          }
        }  
      }
    }
  }
  post {
    always {
      // When successed currentBuild.result is null
      script {
        if (currentBuild.result == null) {
          currentBuild.result = 'SUCCESS'
        }
      }
      echo "Cleaning.."
      cleanWs()
    }
    // Slack Notifications syntax: https://www.jenkins.io/doc/pipeline/steps/slack/
    unsuccessful {
      script {
        // CHANGE_ID is set only for pull requests
        if (env.CHANGE_ID) {
          slackSend (color: '#FF0000', message: "Job ${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL}) failed.")
        }
      }
    }
    fixed {
      script {
        // CHANGE_ID is set only for pull requests
        if (env.CHANGE_ID) {
          slackSend (color: '#00FF00', message: "Job ${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL}) back to normal.")
        }
      }
    }
  }
}